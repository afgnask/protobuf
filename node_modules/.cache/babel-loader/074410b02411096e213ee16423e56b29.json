{"ast":null,"code":"import _slicedToArray from \"/Users/afganaskarli/PycharmProjects/buf/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js\";\nimport React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport { decodeFixed32, decodeFixed64, decodeStringOrBytes, decodeVarintParts } from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\n\nfunction ProtobufVarintPart(props) {\n  const value = props.value;\n  const decoded = decodeVarintParts(value);\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"As \", d.type, \": \", d.value, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  })));\n}\n\nfunction ProtobufStringOrBytesPart(props) {\n  const value = props.value;\n  return value.value;\n}\n\nfunction ProtobufFixed64Part(props) {\n  const value = props.value;\n  const decoded = decodeFixed64(value);\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"As \", d.type, \": \", d.value, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  })));\n}\n\nfunction ProtobufFixed32Part(props) {\n  const value = props.value;\n  const decoded = decodeFixed32(value);\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"As \", d.type, \": \", d.value, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })));\n}\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [React.createElement(ProtobufVarintPart, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      })];\n\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n      let decoded = decodeProto(part.value);\n\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return [React.createElement(ProtobufDisplay, {\n          value: decoded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 62\n          },\n          __self: this\n        }), \"protobuf\"];\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return [React.createElement(ProtobufStringOrBytesPart, {\n          value: decoded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 65\n          },\n          __self: this\n        }), decoded.type];\n      }\n\n    case TYPES.FIXED64:\n      return [React.createElement(ProtobufFixed64Part, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      })];\n\n    case TYPES.FIXED32:\n      return [React.createElement(ProtobufFixed32Part, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      })];\n\n    default:\n      return [\"Unknown type\"];\n  }\n}\n\nfunction ProtobufPart(props) {\n  const part = props.part;\n\n  const _getProtobufPart = getProtobufPart(part),\n        _getProtobufPart2 = _slicedToArray(_getProtobufPart, 2),\n        contents = _getProtobufPart2[0],\n        subType = _getProtobufPart2[1];\n\n  const stringType = typeToString(part.type, subType);\n  return React.createElement(Table.Row, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }, part.byteRange.join(\"-\")), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, part.index), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, stringType), React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, contents));\n}\n\nexport default ProtobufPart;","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js"],"names":["React","Table","decodeProto","TYPES","typeToString","decodeFixed32","decodeFixed64","decodeStringOrBytes","decodeVarintParts","ProtobufDisplay","ProtobufVarintPart","props","value","decoded","map","d","i","type","ProtobufStringOrBytesPart","ProtobufFixed64Part","ProtobufFixed32Part","getProtobufPart","part","VARINT","LENDELIM","length","leftOver","FIXED64","FIXED32","ProtobufPart","contents","subType","stringType","byteRange","join","index"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport {\n  decodeFixed32,\n  decodeFixed64,\n  decodeStringOrBytes,\n  decodeVarintParts\n} from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\n\nfunction ProtobufVarintPart(props) {\n  const { value } = props;\n  const decoded = decodeVarintParts(value);\n\n  return decoded.map((d, i) => (\n      \n    <span key={i}>\n      As {d.type}: {d.value}\n      <br />\n    </span>\n  ));\n}\n\nfunction ProtobufStringOrBytesPart(props) {\n  const { value } = props;\n  return value.value;\n}\n\nfunction ProtobufFixed64Part(props) {\n  const { value } = props;\n  const decoded = decodeFixed64(value);\n\n  return decoded.map((d, i) => (\n    <span key={i}>\n      As {d.type}: {d.value}\n      <br />\n    </span>\n  ));\n}\n\nfunction ProtobufFixed32Part(props) {\n  const { value } = props;\n  const decoded = decodeFixed32(value);\n\n  return decoded.map((d, i) => (\n    <span key={i}>\n      As {d.type}: {d.value}\n      <br />\n    </span>\n  ));\n}\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [<ProtobufVarintPart value={part.value} />];\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n      let decoded = decodeProto(part.value);\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return [<ProtobufDisplay value={decoded} />, \"protobuf\"];\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return [<ProtobufStringOrBytesPart value={decoded} />, decoded.type];\n      }\n    case TYPES.FIXED64:\n      return [<ProtobufFixed64Part value={part.value} />];\n    case TYPES.FIXED32:\n      return [<ProtobufFixed32Part value={part.value} />];\n    default:\n      return [\"Unknown type\"];\n  }\n}\n\nfunction ProtobufPart(props) {\n  const { part } = props;\n\n  const [contents, subType] = getProtobufPart(part);\n  const stringType = typeToString(part.type, subType);\n\n  return (\n    <Table.Row>\n      <Table.Cell>{part.byteRange.join(\"-\")}</Table.Cell>\n      <Table.Cell>{part.index}</Table.Cell>\n      <Table.Cell>{stringType}</Table.Cell>\n      <Table.Cell>{contents}</Table.Cell>\n    </Table.Row>\n  );\n}\n\nexport default ProtobufPart;\n"]},"metadata":{},"sourceType":"module"}