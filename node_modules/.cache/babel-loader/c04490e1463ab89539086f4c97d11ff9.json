{"ast":null,"code":"import _slicedToArray from \"/Users/afganaskarli/PycharmProjects/buf/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/afganaskarli/PycharmProjects/buf/src/App.js\";\nimport React, { Fragment, useState, useEffect } from \"react\";\nimport { Container, Divider, Form, Header, TextArea } from \"semantic-ui-react\";\nimport { useLocation } from 'react-router-dom';\nimport { parseInput, bufferToPrettyHex } from \"./hexUtils\";\nimport \"./App.css\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\nimport { decodeProto } from \"./protobufDecoder\";\n\nfunction App() {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        hex = _useState2[0],\n        setHex = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        hexBuffer = _useState4[0],\n        setHexBuffer = _useState4[1];\n\n  const location = useLocation();\n\n  const onHexChanged = e => {\n    setHex(e.target.value);\n  };\n\n  const onSubmit = () => {\n    const buffer = parseInput(hex);\n    setHex(bufferToPrettyHex(buffer));\n    setHexBuffer(buffer);\n  };\n\n  useEffect(() => {\n    if (location.pathname !== '/') {\n      const newHex = decodeURI(location.pathname.substr(1));\n      setHex(newHex); // Parsing and decoding\n\n      const buffer = parseInput(newHex);\n      setHex(bufferToPrettyHex(buffer));\n      setHexBuffer(buffer);\n    }\n  }, [location.pathname]);\n  const result = hexBuffer ? React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, React.createElement(Header, {\n    as: \"h2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Result\"), React.createElement(ProtobufDisplay, {\n    value: decodeProto(hexBuffer),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  })) : null;\n  return React.createElement(Container, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Form, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(Form.Group, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, React.createElement(TextArea, {\n    placeholder: \"Paste Protobuf or gRPC request as hex or base64\",\n    onChange: onHexChanged,\n    value: hex,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  })), React.createElement(Form.Button, {\n    primary: true,\n    fluid: true,\n    onClick: onSubmit,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Decode\")), result, React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, \"Made by pawitp. Contribute on\", \" \", React.createElement(\"a\", {\n    href: \"https://github.com/pawitp/protobuf-decoder\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"GitHub\"), \".\"));\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/App.js"],"names":["React","Fragment","useState","useEffect","Container","Divider","Form","Header","TextArea","useLocation","parseInput","bufferToPrettyHex","ProtobufDisplay","decodeProto","App","hex","setHex","hexBuffer","setHexBuffer","location","onHexChanged","e","target","value","onSubmit","buffer","pathname","newHex","decodeURI","substr","result"],"mappings":"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","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\nimport { Container, Divider, Form, Header, TextArea } from \"semantic-ui-react\";\nimport { useLocation } from 'react-router-dom';\nimport { parseInput, bufferToPrettyHex } from \"./hexUtils\";\nimport \"./App.css\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\nimport { decodeProto } from \"./protobufDecoder\";\n\nfunction App() {\n  const [hex, setHex] = useState(\"\");\n  const [hexBuffer, setHexBuffer] = useState(\"\");\n  const location = useLocation();\n  const onHexChanged = e => {\n    setHex(e.target.value);\n  };\n\n  const onSubmit = () => {\n    const buffer = parseInput(hex);\n    setHex(bufferToPrettyHex(buffer));\n    setHexBuffer(buffer);\n  };\n\n  useEffect(() => {\n    if (location.pathname !== '/') {\n      const newHex = decodeURI(location.pathname.substr(1));\n      setHex(newHex);\n\n      // Parsing and decoding\n      const buffer = parseInput(newHex);\n      setHex(bufferToPrettyHex(buffer));\n      setHexBuffer(buffer);\n    }\n  }, [location.pathname]);\n\n\n  const result = hexBuffer ? (\n    <Fragment>\n      <Header as=\"h2\">Result</Header>\n      <ProtobufDisplay value={decodeProto(hexBuffer)} />\n    </Fragment>\n  ) : null;\n\n  return (\n    <Container>\n      \n\n      <Form>\n        <Form.Group>\n          <TextArea\n            placeholder=\"Paste Protobuf or gRPC request as hex or base64\"\n            onChange={onHexChanged}\n            value={hex}\n          />\n        </Form.Group>\n        <Form.Button primary fluid onClick={onSubmit}>\n          Decode\n        </Form.Button>\n      </Form>\n      {result}\n      <Divider />\n      <p>\n        Made by pawitp. Contribute on{\" \"}\n        <a href=\"https://github.com/pawitp/protobuf-decoder\">GitHub</a>.\n      </p>\n    </Container>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}