{"ast":null,"code":"import _slicedToArray from \"/Users/afganaskarli/PycharmProjects/buf/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js\";\nimport React, { useRef } from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport { decodeStringOrBytes, decodeVarintParts } from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\n\nfunction ProtobufVarintPart(props) {\n  const value = props.value;\n  const hasRendered = useRef(false);\n  const decoded = decodeVarintParts(value); // This is what we are looking for\n\n  if (!hasRendered.current && decoded[0]) {\n    hasRendered.current = true;\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23\n      },\n      __self: this\n    }, decoded[0].value);\n  } else {\n    return null;\n  }\n}\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [React.createElement(ProtobufVarintPart, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      })];\n\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n      let decoded = decodeProto(part.value);\n\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return [React.createElement(ProtobufDisplay, {\n          value: decoded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        })];\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return \"\";\n      }\n\n  }\n}\n\nfunction ProtobufPart(props) {\n  const part = props.part;\n\n  const _getProtobufPart = getProtobufPart(part),\n        _getProtobufPart2 = _slicedToArray(_getProtobufPart, 1),\n        contents = _getProtobufPart2[0];\n\n  return React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, contents);\n}\n\nexport default ProtobufPart;","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js"],"names":["React","useRef","Table","decodeProto","TYPES","typeToString","decodeStringOrBytes","decodeVarintParts","ProtobufDisplay","ProtobufVarintPart","props","value","hasRendered","decoded","current","getProtobufPart","part","type","VARINT","LENDELIM","length","leftOver","ProtobufPart","contents"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,YAA7B,QAAiD,mBAAjD;AAEA,SAGEC,mBAHF,EAIEC,iBAJF,QAKO,uBALP;AAMA,OAAOC,eAAP,MAA4B,mBAA5B;;AAIA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,QACzBC,KADyB,GACfD,KADe,CACzBC,KADyB;AAEjC,QAAMC,WAAW,GAAGX,MAAM,CAAC,KAAD,CAA1B;AACA,QAAMY,OAAO,GAAGN,iBAAiB,CAACI,KAAD,CAAjC,CAHiC,CAKjC;;AACA,MAAI,CAACC,WAAW,CAACE,OAAb,IAAwBD,OAAO,CAAC,CAAD,CAAnC,EAAwC;AACtCD,IAAAA,WAAW,CAACE,OAAZ,GAAsB,IAAtB;AACA,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,OAAO,CAAC,CAAD,CAAP,CAAWF,KAAlB,CAAP;AACD,GAHD,MAGO;AACL,WAAO,IAAP;AACD;AACF;;AAKD,SAASI,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,UAAQA,IAAI,CAACC,IAAb;AACE,SAAKb,KAAK,CAACc,MAAX;AACE,aAAO,CAAC,oBAAC,kBAAD;AAAoB,QAAA,KAAK,EAAEF,IAAI,CAACL,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAP;;AACF,SAAKP,KAAK,CAACe,QAAX;AACE;AAGA,UAAIN,OAAO,GAAGV,WAAW,CAACa,IAAI,CAACL,KAAN,CAAzB;;AAGA,UAAIK,IAAI,CAACL,KAAL,CAAWS,MAAX,GAAoB,CAApB,IAAyBP,OAAO,CAACQ,QAAR,CAAiBD,MAAjB,KAA4B,CAAzD,EAA4D;AAC1D,eAAO,CAAC,oBAAC,eAAD;AAAiB,UAAA,KAAK,EAAEP,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAD,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,GAAGP,mBAAmB,CAACU,IAAI,CAACL,KAAN,CAA7B;AACA,eAAO,EAAP;AACD;;AAfL;AAmBD;;AAED,SAASW,YAAT,CAAsBZ,KAAtB,EAA6B;AAAA,QACnBM,IADmB,GACVN,KADU,CACnBM,IADmB;;AAAA,2BAGRD,eAAe,CAACC,IAAD,CAHP;AAAA;AAAA,QAGpBO,QAHoB;;AAM3B,SAGI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaA,QAAb,CAHJ;AAMD;;AAED,eAAeD,YAAf","sourcesContent":["import React, { useRef } from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\n\nimport {\n\n\n  decodeStringOrBytes,\n  decodeVarintParts\n} from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\n\n\n\nfunction ProtobufVarintPart(props) {\n  const { value } = props;\n  const hasRendered = useRef(false);\n  const decoded = decodeVarintParts(value);\n\n  // This is what we are looking for\n  if (!hasRendered.current && decoded[0]) {\n    hasRendered.current = true;\n    return <span>{decoded[0].value}</span>;\n  } else {\n    return null;\n  }\n}\n\n\n\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [<ProtobufVarintPart value={part.value} />];\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n\n\n      let decoded = decodeProto(part.value);\n\n\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return [<ProtobufDisplay value={decoded} />];\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return \"\";\n      }\n\n\n  }\n}\n\nfunction ProtobufPart(props) {\n  const { part } = props;\n\n  const [contents] = getProtobufPart(part);\n\n\n  return (\n\n\n      <Table.Cell>{contents}</Table.Cell>\n\n  );\n}\n\nexport default ProtobufPart;\n"]},"metadata":{},"sourceType":"module"}