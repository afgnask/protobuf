{"ast":null,"code":"import _slicedToArray from \"/Users/afganaskarli/PycharmProjects/buf/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js\";\nimport React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport { decodeFixed32, decodeFixed64, decodeStringOrBytes, decodeVarintParts } from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\"; // This is value we are looking for\n\nfunction ProtobufVarintPart(props) {\n  const value = props.value;\n  const decoded = decodeVarintParts(value); // this is what we are looking for:\n\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"As \", d.type, \": \", d.value, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n}\n\nfunction ProtobufStringOrBytesPart(props) {\n  const value = props.value;\n  return \"value.value\";\n}\n\nfunction ProtobufFixed64Part(props) {\n  const value = props.value;\n  const decoded = decodeFixed64(value);\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }));\n}\n\nfunction ProtobufFixed32Part(props) {\n  const value = props.value;\n  const decoded = decodeFixed32(value);\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }));\n}\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [React.createElement(ProtobufVarintPart, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63\n        },\n        __self: this\n      })];\n\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n      let decoded = decodeProto(part.value);\n\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return \"\";\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return \"\";\n      }\n\n    case TYPES.FIXED64:\n      return \"\";\n\n    case TYPES.FIXED32:\n      return [React.createElement(ProtobufFixed32Part, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      })];\n\n    default:\n      return [\"Unknown type\"];\n  }\n}\n\nfunction ProtobufPart(props) {\n  const part = props.part;\n\n  const _getProtobufPart = getProtobufPart(part),\n        _getProtobufPart2 = _slicedToArray(_getProtobufPart, 1),\n        contents = _getProtobufPart2[0];\n\n  return React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, contents);\n}\n\nexport default ProtobufPart;","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js"],"names":["React","Table","decodeProto","TYPES","typeToString","decodeFixed32","decodeFixed64","decodeStringOrBytes","decodeVarintParts","ProtobufDisplay","ProtobufVarintPart","props","value","decoded","map","d","i","type","ProtobufStringOrBytesPart","ProtobufFixed64Part","ProtobufFixed32Part","getProtobufPart","part","VARINT","LENDELIM","length","leftOver","FIXED64","FIXED32","ProtobufPart","contents"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport {\n  decodeFixed32,\n  decodeFixed64,\n  decodeStringOrBytes,\n  decodeVarintParts\n} from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\n\n\n\n\n// This is value we are looking for\nfunction ProtobufVarintPart(props) {\n  const { value } = props;\n  const decoded = decodeVarintParts(value);\n  // this is what we are looking for:\n  return decoded.map((d, i) => (\n\n    <span key={i}>\n      As {d.type}: {d.value}\n      <br />\n    </span>\n  ));\n}\n\n\n\n\n\nfunction ProtobufStringOrBytesPart(props) {\n  const { value } = props;\n  return \"value.value\";\n}\n\nfunction ProtobufFixed64Part(props) {\n  const { value } = props;\n  const decoded = decodeFixed64(value);\n\n  return decoded.map((d, i) => (\n    <span key={i}>\n\n    </span>\n  ));\n}\n\nfunction ProtobufFixed32Part(props) {\n  const { value } = props;\n  const decoded = decodeFixed32(value);\n\n  return decoded.map((d, i) => (\n    <span key={i}>\n\n    </span>\n  ));\n}\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [<ProtobufVarintPart value={part.value} />];\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n      let decoded = decodeProto(part.value);\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return \"\";\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return \"\";\n      }\n    case TYPES.FIXED64:\n      return \"\";\n    case TYPES.FIXED32:\n      return [<ProtobufFixed32Part value={part.value} />];\n    default:\n      return [\"Unknown type\"];\n  }\n}\n\nfunction ProtobufPart(props) {\n  const { part } = props;\n\n  const [contents] = getProtobufPart(part);\n\n\n  return (\n\n\n      <Table.Cell>{contents}</Table.Cell>\n\n  );\n}\n\nexport default ProtobufPart;\n"]},"metadata":{},"sourceType":"module"}