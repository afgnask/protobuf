{"ast":null,"code":"import _slicedToArray from \"/Users/afganaskarli/PycharmProjects/buf/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js\";\nimport React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport { decodeStringOrBytes, decodeVarintParts } from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\"; // This is value we are looking for\n\nfunction ProtobufVarintPart(props) {\n  const value = props.value;\n  const decoded = decodeVarintParts(value); // this is what we are looking for:\n\n  return decoded.map((d, i) => React.createElement(\"span\", {\n    key: i,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, d.value, React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  })));\n}\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [React.createElement(ProtobufVarintPart, {\n        value: part.value,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38\n        },\n        __self: this\n      })];\n\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n      let decoded = decodeProto(part.value);\n\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return [React.createElement(ProtobufDisplay, {\n          value: decoded,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 47\n          },\n          __self: this\n        })];\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return \"\";\n      }\n\n  }\n}\n\nfunction ProtobufPart(props) {\n  const part = props.part;\n\n  const _getProtobufPart = getProtobufPart(part),\n        _getProtobufPart2 = _slicedToArray(_getProtobufPart, 1),\n        contents = _getProtobufPart2[0];\n\n  return React.createElement(Table.Cell, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, contents);\n}\n\nexport default ProtobufPart;","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/ProtobufPart.js"],"names":["React","Table","decodeProto","TYPES","typeToString","decodeStringOrBytes","decodeVarintParts","ProtobufDisplay","ProtobufVarintPart","props","value","decoded","map","d","i","getProtobufPart","part","type","VARINT","LENDELIM","length","leftOver","ProtobufPart","contents"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,KAAT,QAAsB,mBAAtB;AACA,SAASC,WAAT,EAAsBC,KAAtB,EAA6BC,YAA7B,QAAiD,mBAAjD;AACA,SAGEC,mBAHF,EAIEC,iBAJF,QAKO,uBALP;AAMA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAKA;;AACA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAAA,QACzBC,KADyB,GACfD,KADe,CACzBC,KADyB;AAEjC,QAAMC,OAAO,GAAGL,iBAAiB,CAACI,KAAD,CAAjC,CAFiC,CAGjC;;AACA,SAAOC,OAAO,CAACC,GAAR,CAAY,CAACC,CAAD,EAAIC,CAAJ,KAEjB;AAAM,IAAA,GAAG,EAAEA,CAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACID,CAAC,CAACH,KADN,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAFK,CAAP;AAOD;;AAQD,SAASK,eAAT,CAAyBC,IAAzB,EAA+B;AAC7B,UAAQA,IAAI,CAACC,IAAb;AACE,SAAKd,KAAK,CAACe,MAAX;AACE,aAAO,CAAC,oBAAC,kBAAD;AAAoB,QAAA,KAAK,EAAEF,IAAI,CAACN,KAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAD,CAAP;;AACF,SAAKP,KAAK,CAACgB,QAAX;AACE;AAGA,UAAIR,OAAO,GAAGT,WAAW,CAACc,IAAI,CAACN,KAAN,CAAzB;;AAGA,UAAIM,IAAI,CAACN,KAAL,CAAWU,MAAX,GAAoB,CAApB,IAAyBT,OAAO,CAACU,QAAR,CAAiBD,MAAjB,KAA4B,CAAzD,EAA4D;AAC1D,eAAO,CAAC,oBAAC,eAAD;AAAiB,UAAA,KAAK,EAAET,OAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAD,CAAP;AACD,OAFD,MAEO;AACLA,QAAAA,OAAO,GAAGN,mBAAmB,CAACW,IAAI,CAACN,KAAN,CAA7B;AACA,eAAO,EAAP;AACD;;AAfL;AAmBD;;AAED,SAASY,YAAT,CAAsBb,KAAtB,EAA6B;AAAA,QACnBO,IADmB,GACVP,KADU,CACnBO,IADmB;;AAAA,2BAGRD,eAAe,CAACC,IAAD,CAHP;AAAA;AAAA,QAGpBO,QAHoB;;AAM3B,SAGI,oBAAC,KAAD,CAAO,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAaA,QAAb,CAHJ;AAMD;;AAED,eAAeD,YAAf","sourcesContent":["import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { decodeProto, TYPES, typeToString } from \"./protobufDecoder\";\nimport {\n\n\n  decodeStringOrBytes,\n  decodeVarintParts\n} from \"./protobufPartDecoder\";\nimport ProtobufDisplay from \"./ProtobufDisplay\";\n\n\n\n\n// This is value we are looking for\nfunction ProtobufVarintPart(props) {\n  const { value } = props;\n  const decoded = decodeVarintParts(value);\n  // this is what we are looking for:\n  return decoded.map((d, i) => (\n\n    <span key={i}>\n       {d.value}\n      <br />\n    </span>\n  ));\n}\n\n\n\n\n\n\n\nfunction getProtobufPart(part) {\n  switch (part.type) {\n    case TYPES.VARINT:\n      return [<ProtobufVarintPart value={part.value} />];\n    case TYPES.LENDELIM:\n      // TODO: Support repeated field\n\n\n      let decoded = decodeProto(part.value);\n\n\n      if (part.value.length > 0 && decoded.leftOver.length === 0) {\n        return [<ProtobufDisplay value={decoded} />];\n      } else {\n        decoded = decodeStringOrBytes(part.value);\n        return \"\";\n      }\n\n\n  }\n}\n\nfunction ProtobufPart(props) {\n  const { part } = props;\n\n  const [contents] = getProtobufPart(part);\n\n\n  return (\n\n\n      <Table.Cell>{contents}</Table.Cell>\n\n  );\n}\n\nexport default ProtobufPart;\n"]},"metadata":{},"sourceType":"module"}