{"ast":null,"code":"const express = require(\"express\");\n\nconst decodeProto = require(\"./protobufDecoder\");\n\nconst parseInput = require(\"./hexUtils\");\n\nconst app = express();\nconst port = 8080;\napp.get(\"/:hex\", (req, res) => {\n  const hex = req.params.hex;\n  const buffer = parseInput(hex);\n  const decoded = decodeProto(buffer); // assuming the first part's value is the value you want to return\n\n  const firstValue = decoded.parts[0].value.toString();\n  res.json({\n    value: firstValue\n  });\n});\napp.listen(port, () => {\n  console.log(\"Server is listening on port \".concat(port));\n});\nmodule.exports = app;","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/App.js"],"names":["express","require","decodeProto","parseInput","app","port","get","req","res","hex","params","buffer","decoded","firstValue","parts","value","toString","json","listen","console","log","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,mBAAD,CAA3B;;AACA,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAD,CAA1B;;AACA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;AACA,MAAMK,IAAI,GAAG,IAAb;AAEAD,GAAG,CAACE,GAAJ,CAAQ,OAAR,EAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC7B,QAAMC,GAAG,GAAGF,GAAG,CAACG,MAAJ,CAAWD,GAAvB;AACA,QAAME,MAAM,GAAGR,UAAU,CAACM,GAAD,CAAzB;AACA,QAAMG,OAAO,GAAGV,WAAW,CAACS,MAAD,CAA3B,CAH6B,CAK7B;;AACA,QAAME,UAAU,GAAGD,OAAO,CAACE,KAAR,CAAc,CAAd,EAAiBC,KAAjB,CAAuBC,QAAvB,EAAnB;AACAR,EAAAA,GAAG,CAACS,IAAJ,CAAS;AAAEF,IAAAA,KAAK,EAAEF;AAAT,GAAT;AACD,CARD;AAUAT,GAAG,CAACc,MAAJ,CAAWb,IAAX,EAAiB,MAAM;AACrBc,EAAAA,OAAO,CAACC,GAAR,uCAA2Cf,IAA3C;AACD,CAFD;AAIAgB,MAAM,CAACC,OAAP,GAAiBlB,GAAjB","sourcesContent":["const express = require(\"express\");\nconst decodeProto = require(\"./protobufDecoder\");\nconst parseInput = require(\"./hexUtils\");\nconst app = express();\nconst port = 8080;\n\napp.get(\"/:hex\", (req, res) => {\n  const hex = req.params.hex;\n  const buffer = parseInput(hex);\n  const decoded = decodeProto(buffer);\n\n  // assuming the first part's value is the value you want to return\n  const firstValue = decoded.parts[0].value.toString();\n  res.json({ value: firstValue });\n});\n\napp.listen(port, () => {\n  console.log(`Server is listening on port ${port}`);\n});\n\nmodule.exports = app;"]},"metadata":{},"sourceType":"module"}