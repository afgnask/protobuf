{"ast":null,"code":"export function parseInput(input) {\n  const normalizedInput = input.replace(/\\s/g, \"\");\n  const normalizedHexInput = normalizedInput.replace(/0x/g, \"\").toLowerCase();\n\n  if (isHex(normalizedHexInput)) {\n    return Buffer.from(normalizedHexInput, \"hex\");\n  } else {\n    return Buffer.from(normalizedInput, \"base64\");\n  }\n}\nexport function isHex(string) {\n  let result = true;\n\n  for (const char of string) {\n    if (!(char >= \"a\" && char <= \"f\" || char >= \"0\" && char <= \"9\")) {\n      result = false;\n    }\n  }\n\n  return result;\n}\nexport function bufferToPrettyHex(buffer) {\n  let output = \"\";\n\n  for (const v of buffer) {\n    if (output !== \"\") {\n      output += \" \";\n    }\n\n    const hex = v.toString(16);\n\n    if (hex.length === 1) {\n      output += \"0\" + hex;\n    } else {\n      output += hex;\n    }\n  }\n\n  return output;\n}\nexport function bufferLeToBeHex(buffer) {\n  let output = \"\";\n\n  for (const v of buffer) {\n    const hex = v.toString(16);\n\n    if (hex.length === 1) {\n      output = \"0\" + hex + output;\n    } else {\n      output = hex + output;\n    }\n  }\n\n  return output;\n}","map":{"version":3,"sources":["/Users/afganaskarli/PycharmProjects/buf/src/hexUtils.js"],"names":["parseInput","input","normalizedInput","replace","normalizedHexInput","toLowerCase","isHex","Buffer","from","string","result","char","bufferToPrettyHex","buffer","output","v","hex","toString","length","bufferLeToBeHex"],"mappings":"AAAA,OAAO,SAASA,UAAT,CAAoBC,KAApB,EAA2B;AAChC,QAAMC,eAAe,GAAGD,KAAK,CAACE,OAAN,CAAc,KAAd,EAAqB,EAArB,CAAxB;AACA,QAAMC,kBAAkB,GAAGF,eAAe,CAACC,OAAhB,CAAwB,KAAxB,EAA+B,EAA/B,EAAmCE,WAAnC,EAA3B;;AACA,MAAIC,KAAK,CAACF,kBAAD,CAAT,EAA+B;AAC7B,WAAOG,MAAM,CAACC,IAAP,CAAYJ,kBAAZ,EAAgC,KAAhC,CAAP;AACD,GAFD,MAEO;AACL,WAAOG,MAAM,CAACC,IAAP,CAAYN,eAAZ,EAA6B,QAA7B,CAAP;AACD;AACF;AAED,OAAO,SAASI,KAAT,CAAeG,MAAf,EAAuB;AAC5B,MAAIC,MAAM,GAAG,IAAb;;AACA,OAAK,MAAMC,IAAX,IAAmBF,MAAnB,EAA2B;AACzB,QAAI,EAAGE,IAAI,IAAI,GAAR,IAAeA,IAAI,IAAI,GAAxB,IAAiCA,IAAI,IAAI,GAAR,IAAeA,IAAI,IAAI,GAA1D,CAAJ,EAAqE;AACnED,MAAAA,MAAM,GAAG,KAAT;AACD;AACF;;AACD,SAAOA,MAAP;AACD;AAED,OAAO,SAASE,iBAAT,CAA2BC,MAA3B,EAAmC;AACxC,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,MAAMC,CAAX,IAAgBF,MAAhB,EAAwB;AACtB,QAAIC,MAAM,KAAK,EAAf,EAAmB;AACjBA,MAAAA,MAAM,IAAI,GAAV;AACD;;AAED,UAAME,GAAG,GAAGD,CAAC,CAACE,QAAF,CAAW,EAAX,CAAZ;;AACA,QAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AACpBJ,MAAAA,MAAM,IAAI,MAAME,GAAhB;AACD,KAFD,MAEO;AACLF,MAAAA,MAAM,IAAIE,GAAV;AACD;AACF;;AACD,SAAOF,MAAP;AACD;AAED,OAAO,SAASK,eAAT,CAAyBN,MAAzB,EAAiC;AACtC,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,MAAMC,CAAX,IAAgBF,MAAhB,EAAwB;AACtB,UAAMG,GAAG,GAAGD,CAAC,CAACE,QAAF,CAAW,EAAX,CAAZ;;AACA,QAAID,GAAG,CAACE,MAAJ,KAAe,CAAnB,EAAsB;AACpBJ,MAAAA,MAAM,GAAG,MAAME,GAAN,GAAYF,MAArB;AACD,KAFD,MAEO;AACLA,MAAAA,MAAM,GAAGE,GAAG,GAAGF,MAAf;AACD;AACF;;AACD,SAAOA,MAAP;AACD","sourcesContent":["export function parseInput(input) {\n  const normalizedInput = input.replace(/\\s/g, \"\");\n  const normalizedHexInput = normalizedInput.replace(/0x/g, \"\").toLowerCase();\n  if (isHex(normalizedHexInput)) {\n    return Buffer.from(normalizedHexInput, \"hex\");\n  } else {\n    return Buffer.from(normalizedInput, \"base64\");\n  }\n}\n\nexport function isHex(string) {\n  let result = true;\n  for (const char of string) {\n    if (!((char >= \"a\" && char <= \"f\") || (char >= \"0\" && char <= \"9\"))) {\n      result = false;\n    }\n  }\n  return result;\n}\n\nexport function bufferToPrettyHex(buffer) {\n  let output = \"\";\n  for (const v of buffer) {\n    if (output !== \"\") {\n      output += \" \";\n    }\n\n    const hex = v.toString(16);\n    if (hex.length === 1) {\n      output += \"0\" + hex;\n    } else {\n      output += hex;\n    }\n  }\n  return output;\n}\n\nexport function bufferLeToBeHex(buffer) {\n  let output = \"\";\n  for (const v of buffer) {\n    const hex = v.toString(16);\n    if (hex.length === 1) {\n      output = \"0\" + hex + output;\n    } else {\n      output = hex + output;\n    }\n  }\n  return output;\n}\n"]},"metadata":{},"sourceType":"module"}